Starting on Sun 25 Aug 23:11:44 BST 2024
/rds/general/user/as5023/home/irp-as5023/model/model_scripts/../src/run_model.py:56: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  FCNN_model.load_state_dict(torch.load(args.FCNN_load_path, map_location=device))
/rds/general/user/as5023/home/irp-as5023/model/model_scripts/../src/run_model.py:80: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  GCN_model.load_state_dict(torch.load(args.GCN_load_path, map_location=device))
Good data tensor 1 (FCNN): 
tensor([[ 5.1366e+00, -8.1650e+01,  3.9609e-01,  1.0509e+03,  1.0850e+02,
          3.5948e-01,  1.1013e+00]])
FCNN model output for Good data tensor 1: 7.0

Good data tensor 2 (FCNN): 
tensor([[ 6.8620e+00,  8.3952e+01,  7.1845e-01, -4.9781e+02,  9.5759e+01,
          3.4275e-01,  1.2446e+00]])
FCNN model output for Good data tensor 2: 0.0

Good data tensor 3 (FCNN): 
tensor([[ 6.8146e+00,  8.3983e+01,  5.7086e-01, -8.3090e+02,  9.4600e+01,
          3.3561e-01,  9.4979e-01]])
FCNN model output for Good data tensor 3: 0.0

Mid data tensor 1 (FCNN): 
tensor([[ 1.8718e+01, -8.6929e+01,  3.1222e-01, -1.3290e+03,  1.0975e+02,
          3.1983e-01,  5.1918e-01]])
FCNN model output for Mid data tensor 1: 7.0

Mid data tensor 2 (FCNN): 
tensor([[ 1.7887e+01, -8.7879e+01,  3.5435e-01, -1.0085e+03,  5.3702e+01,
          3.6311e-01,  6.0263e-01]])
FCNN model output for Mid data tensor 2: 7.0

Mid data tensor 3 (FCNN): 
tensor([[ 2.3997e+01,  7.9250e+01,  9.9005e-01, -6.4750e+02,  7.8620e+01,
          3.0083e-01,  1.0637e+00]])
FCNN model output for Mid data tensor 3: 0.0

Bad data tensor 1 (FCNN): 
tensor([[ 2.0365e+01, -8.6114e+01,  4.6029e-01,  1.1771e+03,  1.3235e+02,
          3.4237e-01,  5.8278e-01]])
FCNN model output for Bad data tensor 1: 7.0

Bad data tensor 2 (FCNN): 
tensor([[ 2.8121e+01,  8.9365e+01,  8.1705e-01, -1.3930e+03,  1.2740e+02,
          3.4032e-01,  5.3290e-01]])
FCNN model output for Bad data tensor 2: 0.0

Bad data tensor 3 (FCNN): 
tensor([[  15.5919,   82.5744,    0.8550, -176.6573,  176.7354,    0.2953,
            0.5217]])
FCNN model output for Bad data tensor 3: 0.0



Seed 206
Good label at centre node (GCN): 5.0
GCN model output for Good data: 0.0

Mid label at centre node (GCN): 4.0
GCN model output for Mid data: 0.0

Bad label at centre node (GCN): 0.0
GCN model output for Bad data: 0.0

Seed 101
Good label at centre node (GCN): 4.0
GCN model output for Good data: 0.0

Mid label at centre node (GCN): 2.0
GCN model output for Mid data: 0.0

Bad label at centre node (GCN): 0.0
GCN model output for Bad data: 0.0

Seed 800
Good label at centre node (GCN): 4.0
GCN model output for Good data: 0.0

Mid label at centre node (GCN): 2.0
GCN model output for Mid data: 0.0

Bad label at centre node (GCN): 2.0
GCN model output for Bad data: 0.0

Completed on Sun 25 Aug 23:21:43 BST 2024

====================================
CPU Time used: 00:07:34
CPU Percent: 75%
Memory usage: 7836296kb
Approx Power usage: 0.0014
Walltime usage: 00:10:00

====================================
